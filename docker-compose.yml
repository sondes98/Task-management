version: '3'  # Version de Docker Compose utilisée

services:
  # Service MySQL (Base de données)
  mysql:
    image: mysql:8.0  # Utilise l'image officielle de MySQL version 8.0
    container_name: mysql_db  # Nom du conteneur MySQL
    restart: always  # Redémarre automatiquement le conteneur en cas d'arrêt
    environment:
      MYSQL_ROOT_PASSWORD: root_password  # Mot de passe root
      MYSQL_DATABASE: my_database  # Nom de la base de données créée au démarrage
      MYSQL_USER: mysql  # Nom de l'utilisateur MySQL
      MYSQL_PASSWORD: my_password  # Mot de passe de l'utilisateur
    ports:
      - "3306:3306"  # Expose MySQL sur le port 3306 de l'hôte
    volumes:
      - mysql_data:/var/lib/mysql  # Stocke les données MySQL pour persistance
    networks:
      - app_network  # Connecte le service au réseau interne

  # Service Backend (NestJS)
  backend:
    build: ./backend  # Indique le dossier où se trouve le Dockerfile du backend
    container_name: nestjs_backend  # Nom du conteneur du backend
    restart: always  # Redémarre automatiquement le conteneur si arrêté
    depends_on:
      - mysql  # Assure que MySQL démarre avant le backend
    environment:
      DB_HOST: mysql  # Adresse du serveur MySQL (nom du service dans Docker)
      DB_PORT: 3306  # Port de connexion à la base de données
      DB_USER: mysql  # Identifiant de connexion à MySQL
      DB_PASSWORD: my_password  # Mot de passe de connexion à MySQL
      DB_NAME: my_database  # Base de données utilisée par l'application
    ports:
      - "5000:5000"  # Expose l'API sur le port 5000 de l'hôte
    networks:
      - app_network  # Connecte le backend au réseau interne

  # Service Frontend (React)
  frontend:
    build: ./frontend  # Indique le dossier où se trouve le Dockerfile du frontend
    container_name: react_frontend  # Nom du conteneur frontend
    restart: always  # Redémarre automatiquement le conteneur si arrêté
    depends_on:
      - backend  # Assure que le backend démarre avant le frontend
    ports:
      - "5173:5173"  # Expose le frontend sur le port 3000 de l'hôte
    networks:
      - app_network  # Connecte le frontend au réseau interne

# Définition des volumes pour la persistance des données
volumes:
  mysql_data:  # Volume persistant pour stocker les données MySQL

# Définition du réseau Docker pour la communication entre services
networks:
  app_network:
    driver: bridge  # Crée un réseau isolé pour les services

